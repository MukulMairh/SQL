--1. display the number of states present in the location table. 
SELECT  COUNT(DISTINCT State) FROM Location;
--2. how many products are of regular type 
SELECT * FROM Product WHERE Type ='Regular';
--3. How much spending has been done on marketing of product ID 1? 
SELECT ProductId,  SUM(Marketing) AS MarkingSpentForProductIdEquals1 FROM fact WHERE ProductId =1  
GROUP BY ProductId;
--4. What is the minimum sales of a product? 
SELECT ProductId , MIN(Sales) MinimumSalesForAProduct FROM fact 
GROUP BY ProductId;
--5. Display the max Cost of Good Sold (COGS).
SELECT ProductId, Max(COGS) MaxCOGS  FROM fact GROUP BY ProductId; 
--6. Display the details of the product where product type is coffee.
SELECT * FROM Product WHERE Product_Type='Coffee';
--7. Display the details where total expenses  are greater than 40.
SELECT * FROM fact WHERE Total_Expenses> 40 ; 
-- 8. What is the average sales in area code 719?
SELECT AVG(Sales) AverageSalesFromAreaCode719, Area_Code FROM fact 
WHERE Area_Code=719;

--9. Find out the total profit generated by Colorado state.
SELECT State,SUM(Profit)AS ProfitGeneratedFromColorado FROM fact f JOIN Location  L ON f.Area_Code= l.Area_Code
WHERE State='Colorado'
GROUP BY State; 
--10. Display the average inventory for each product ID.
SELECT ProductId,  AVG(Inventory) FROM fact GROUP BY ProductId;

--11. Display state in a sequential order in a Location Table.
SELECT DISTINCT State FROM Location ORDER BY State;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
SELECT f.ProductId, Product,  AVG(Budget_Margin) AvgBudgetMargin FROM fact f
JOIN Product p  ON  f.ProductId= p.ProductId
GROUP BY f.ProductId , Product
HAVING AVG(Budget_Margin)> 100 
ORDER BY f.ProductId; 

--13. What is the total sales done on date 2010-01-01?
SELECT SUM(Sales) AS 'TotalSalesOn2010-01-01' FROM fact 
WHERE Date = '2010-01-01'; 

--14. Display the average total expense of each product ID on an individual date.
SELECT ProductId, Date, AVG(Total_Expenses) AS AVGTotal_Expenses FROM fact 
GROUP BY ProductId, Date
ORDER BY  ProductId, Date ; 

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state,area_code. 

SELECT Date, f.ProductId, Product_Type, Product, Sales, Profit, State, f.Area_Code FROM fact f 
JOIN Product p ON f.ProductId= p.ProductId
JOIN Location l On l.Area_Code= f.Area_Code;

-- 16. Display the rank without any gap to show the sales wise rank.
SELECT DENSE_RANK() OVER (ORDER BY Sales), SALES   FROM fact;
 
 --17. Find the state wise profit and sales
 SELECT State, SUM(Profit) SUMOfProfit, SUM(Sales) SUMOfSales FROM fact f 
 JOIN  Location l
 ON f.Area_Code=l.Area_Code
 GROUP BY State;

 --18 Find the state wise profit and sales along with the productname.
 SELECT State,Product,  SUM(Profit) SUMOfProfit, SUM(Sales) SUMOfSales FROM fact f 
 JOIN  Location l
 ON f.Area_Code=l.Area_Code
 JOIN Product p ON p.ProductId=f.ProductId
 GROUP BY State, Product
 ORDER BY State;

 --19. If there is an increase in sales of 5%, calculate the increasedsales.
 SELECT sales , Sales*1.05  AS Percent5IncreasedSales FROM fact; 

 --20. Find the maximum profit along with the product ID and producttype
 SELECT  f.ProductId, Product_Type,Product, Max(Profit) MaxProfit   FROM fact f
 JOIN Product p ON f.ProductId= p.ProductId
 GROUP BY f.ProductId, Product_Type , Product;

 --21. Create a stored procedure to fetch the result according to the product typefrom Product Table.

 CREATE PROCEDURE PROC_GetProductsOnProductType @ProductType VARCHAR(50)
 AS 
 SELECT * FROM Product WHERE Product_Type = @ProductType;
 ;
 EXEC PROC_GetProductsOnProductType @ProductType= 'Coffee';

 --22. Write a query by creating a condition in which if the total expenses is lessthan60 then it is a profit or else loss.
 SELECT Total_Expenses , IIF(Total_Expenses<60, 'Profit', 'Loss')  FROM fact;

 --23. Give the total weekly sales value with the date and product IDdetails. Useroll-up to pull the data in hierarchical order.
 SELECT  DATEPART(WEEK, Date) AS weekly_period , Date,
 ProductId,SUM(Sales) AS TotalSalesValue
 FROM fact 
 GROUP BY ROLLUP (ProductId,  DATEPART(WEEK, Date), Date);

 --24. Apply union and intersection operator on the tables which consist of attribute area code.
 SELECT Area_Code FROM fact 
 UNION 
 SELECT Area_Code FROM Location;
 
 SELECT Area_Code FROM fact 
 INTERSECT 
 SELECT Area_Code FROM Location;

 --25. Create a user-defined function for the product table to fetch a particular product type based upon the userâ€™s preference.
 CREATE FUNCTION GetProductDetailsBasedOnProductType(@ProductType VARCHAR(50))
 RETURNS TABLE 
 AS 
 RETURN SELECT * FROM Product WHERE Product_Type= @ProductType

 SELECT * FROM  GetProductDetailsBasedOnProductType('Coffee');

 --26. Change the product type from coffee to tea where product IDis 1 and undo it.
 BEGIN TRANSACTION  
UPDATE Product SET Product_Type='Tea' WHERE Product_Type ='Coffee';
ROLLBACK TRANSACTION; 

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
SELECT Date, ProductId, Sales, Total_Expenses  FROM fact 
WHERE Total_Expenses BETWEEN 100 AND 200; 

--28 Delete the records in the Product Table for regular type
DELETE FROM Product WHERE Type='Regular'

--29. Display the ASCII value of the fifth character from the columnProduct.
SELECT ASCII (SUBSTRING(Product,5,1)) , Product AS ASCII_VALUE From Product;


SELECT * FROM Product; 
SELECT * FROM fact;
SELECT * FROM LOCATION;